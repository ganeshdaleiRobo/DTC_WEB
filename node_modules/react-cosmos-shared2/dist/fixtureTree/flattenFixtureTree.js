"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.flattenFixtureTree = flattenFixtureTree;

var _getSortedNodeDirNames = require("./getSortedNodeDirNames");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function flattenFixtureTree(treeNode) {
  var parents = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var flatFixtureTree = [];
  (0, _getSortedNodeDirNames.getSortedNodeDirNames)(treeNode.dirs).forEach(function (dirName) {
    var dirNode = treeNode.dirs[dirName];
    flatFixtureTree.push.apply(flatFixtureTree, _toConsumableArray(flattenFixtureTree(dirNode, [].concat(_toConsumableArray(parents), [dirName]))));
  });
  Object.keys(treeNode.items).forEach(function (itemName) {
    var fixtureId = treeNode.items[itemName];

    if (fixtureId.name) {
      var newParents = _toConsumableArray(parents);

      var fileName = newParents.pop();
      if (fileName) flatFixtureTree.push({
        fileName: fileName,
        fixtureId: fixtureId,
        parents: newParents,
        name: itemName
      });
    } else {
      flatFixtureTree.push({
        fileName: itemName,
        fixtureId: fixtureId,
        parents: parents,
        name: null
      });
    }
  });
  return flatFixtureTree;
}