"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRawFixtureTree = createRawFixtureTree;

var _lodash = require("lodash");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function createRawFixtureTree(fixtures) {
  var rootNode = getBlankNode();
  Object.keys(fixtures).forEach(function (fixturePath) {
    return addFixturePathToTree(rootNode, fixturePath, fixtures[fixturePath]);
  });
  return rootNode;
}

function getBlankNode() {
  return {
    items: {},
    dirs: {}
  };
}

function addFixturePathToTree(rootNode, fixturePath, fixtureNames) {
  var namespace = fixturePath.split('/');
  var rawFixtureName = namespace.pop();

  if (!rawFixtureName) {
    throw new Error('Fixture name is empty');
  }

  var fileName = removeFixtureNameExtension(rawFixtureName);

  if (!fixtureNames) {
    return addFixtureIdToTree(rootNode, namespace, fileName, {
      path: fixturePath,
      name: null
    });
  }

  fixtureNames.forEach(function (fixtureName) {
    addFixtureIdToTree(rootNode, [].concat(_toConsumableArray(namespace), [fileName]), fixtureName, {
      path: fixturePath,
      name: fixtureName
    });
  });
}

function addFixtureIdToTree(rootNode, namespace, nodeName, fixtureId) {
  if (namespace.length === 0) {
    rootNode.items[nodeName] = fixtureId;
    return;
  }

  var curNodeDepth = 1;
  var curNode;

  do {
    var partialNamespace = namespace.slice(0, curNodeDepth);
    var partialPath = partialNamespace.map(function (p) {
      return "dirs[\"".concat(p, "\"]");
    }).join('.');
    curNode = (0, _lodash.get)(rootNode, partialPath);

    if (!curNode) {
      curNode = getBlankNode();
      (0, _lodash.set)(rootNode, partialPath, curNode);
    }

    curNodeDepth += 1;
  } while (curNodeDepth <= namespace.length);

  curNode.items[nodeName] = fixtureId;
}

function removeFixtureNameExtension(fixtureName) {
  return fixtureName.replace(/\.(j|t)sx?$/, '');
}