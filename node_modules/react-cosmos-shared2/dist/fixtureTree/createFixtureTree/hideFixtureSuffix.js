"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hideFixtureSuffix = hideFixtureSuffix;

var _lodash = require("lodash");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function hideFixtureSuffix(treeNode, suffix) {
  // The fixture name suffix can be found in both dir and item names
  var dirs = Object.keys(treeNode.dirs).reduce(function (prev, dirName) {
    var cleanDirName = removeFixtureNameSuffix(dirName, suffix);
    return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, cleanDirName, hideFixtureSuffix(treeNode.dirs[dirName], suffix)));
  }, {});
  var items = (0, _lodash.mapKeys)(treeNode.items, function (fixturePath, fixtureName) {
    return removeFixtureNameSuffix(fixtureName, suffix);
  });
  return {
    items: items,
    dirs: dirs
  };
}

function removeFixtureNameSuffix(fixtureNameWithoutExtension, suffix) {
  return fixtureNameWithoutExtension.replace(new RegExp("\\.".concat(suffix, "$")), '');
}