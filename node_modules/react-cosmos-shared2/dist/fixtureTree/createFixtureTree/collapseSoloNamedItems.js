"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.collapseSoloNamedItems = collapseSoloNamedItems;

var _lodash = require("lodash");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function collapseSoloNamedItems(treeNode) {
  var items = _objectSpread({}, treeNode.items);

  var dirs = {};
  (0, _lodash.forEach)(treeNode.dirs, function (dirNode, dirName) {
    var dirItems = dirNode.items;
    var itemNames = Object.keys(dirItems);
    var soloNamedItem = itemNames.length === 1 && noCaseEqual(dirName, itemNames[0]);
    var hasSubdirs = Object.keys(dirNode.dirs).length > 0;

    if (soloNamedItem && !hasSubdirs) {
      items[itemNames[0]] = dirItems[itemNames[0]];
    } else {
      dirs[dirName] = collapseSoloNamedItems(dirNode);
    }
  });
  return {
    items: items,
    dirs: dirs
  };
}

function noCaseEqual(a, b) {
  return a.toUpperCase() === b.toUpperCase();
}